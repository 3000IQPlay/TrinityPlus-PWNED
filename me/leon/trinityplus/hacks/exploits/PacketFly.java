//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\charl\Downloads\Minecraft-Deobfuscator3000-master\1.12 stable mappings"!

//Decompiled by Procyon!

package me.leon.trinityplus.hacks.exploits;

import me.leon.trinityplus.hacks.*;
import me.leon.trinityplus.setting.rewrite.*;
import java.util.*;
import me.leon.trinityplus.utils.world.*;
import me.zero.alpine.fork.listener.*;
import me.leon.trinityplus.events.main.*;
import net.minecraft.entity.*;
import me.leon.trinityplus.managers.*;
import net.minecraft.network.play.server.*;
import net.minecraft.network.*;
import net.minecraft.network.play.client.*;
import me.leon.trinityplus.utils.entity.*;
import net.minecraft.client.entity.*;

public class PacketFly extends Module
{
    public static ModeSetting mode;
    public static SliderSetting factor;
    public static BooleanSetting noClip;
    public static BooleanSetting update;
    public static BooleanSetting reset;
    public static BooleanSetting antikick;
    public static SliderSetting time;
    public static SliderSetting amount;
    private final Random random;
    private final Timer timer;
    private int lastTp;
    private boolean first;
    @EventHandler
    private final Listener<MoveEvent> eventMove;
    @EventHandler
    private final Listener<SpoofEvent> listener0;
    @EventHandler
    public Listener<EventPacketRecieve> onPacket;
    
    public PacketFly() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc             "PacketFly"
        //     3: ldc             "Use packets to fly"
        //     5: getstatic       me/leon/trinityplus/hacks/Category.EXPLOITS:Lme/leon/trinityplus/hacks/Category;
        //     8: invokespecial   me/leon/trinityplus/hacks/Module.<init>:(Ljava/lang/String;Ljava/lang/String;Lme/leon/trinityplus/hacks/Category;)V
        //    11: aload_0         /* this */
        //    12: new             Ljava/util/Random;
        //    15: dup            
        //    16: invokespecial   java/util/Random.<init>:()V
        //    19: putfield        me/leon/trinityplus/hacks/exploits/PacketFly.random:Ljava/util/Random;
        //    22: aload_0         /* this */
        //    23: new             Lme/leon/trinityplus/utils/world/Timer;
        //    26: dup            
        //    27: invokespecial   me/leon/trinityplus/utils/world/Timer.<init>:()V
        //    30: putfield        me/leon/trinityplus/hacks/exploits/PacketFly.timer:Lme/leon/trinityplus/utils/world/Timer;
        //    33: aload_0         /* this */
        //    34: iconst_0       
        //    35: putfield        me/leon/trinityplus/hacks/exploits/PacketFly.lastTp:I
        //    38: aload_0         /* this */
        //    39: iconst_1       
        //    40: putfield        me/leon/trinityplus/hacks/exploits/PacketFly.first:Z
        //    43: aload_0         /* this */
        //    44: new             Lme/zero/alpine/fork/listener/Listener;
        //    47: dup            
        //    48: aload_0         /* this */
        //    49: invokedynamic   BootstrapMethod #0, invoke:(Lme/leon/trinityplus/hacks/exploits/PacketFly;)Lme/zero/alpine/fork/listener/EventHook;
        //    54: iconst_0       
        //    55: anewarray       Ljava/util/function/Predicate;
        //    58: invokespecial   me/zero/alpine/fork/listener/Listener.<init>:(Lme/zero/alpine/fork/listener/EventHook;[Ljava/util/function/Predicate;)V
        //    61: putfield        me/leon/trinityplus/hacks/exploits/PacketFly.eventMove:Lme/zero/alpine/fork/listener/Listener;
        //    64: aload_0         /* this */
        //    65: new             Lme/zero/alpine/fork/listener/Listener;
        //    68: dup            
        //    69: aload_0         /* this */
        //    70: invokedynamic   BootstrapMethod #1, invoke:(Lme/leon/trinityplus/hacks/exploits/PacketFly;)Lme/zero/alpine/fork/listener/EventHook;
        //    75: iconst_0       
        //    76: anewarray       Ljava/util/function/Predicate;
        //    79: invokespecial   me/zero/alpine/fork/listener/Listener.<init>:(Lme/zero/alpine/fork/listener/EventHook;[Ljava/util/function/Predicate;)V
        //    82: putfield        me/leon/trinityplus/hacks/exploits/PacketFly.listener0:Lme/zero/alpine/fork/listener/Listener;
        //    85: aload_0         /* this */
        //    86: new             Lme/zero/alpine/fork/listener/Listener;
        //    89: dup            
        //    90: aload_0         /* this */
        //    91: invokedynamic   BootstrapMethod #2, invoke:(Lme/leon/trinityplus/hacks/exploits/PacketFly;)Lme/zero/alpine/fork/listener/EventHook;
        //    96: iconst_0       
        //    97: anewarray       Ljava/util/function/Predicate;
        //   100: invokespecial   me/zero/alpine/fork/listener/Listener.<init>:(Lme/zero/alpine/fork/listener/EventHook;[Ljava/util/function/Predicate;)V
        //   103: putfield        me/leon/trinityplus/hacks/exploits/PacketFly.onPacket:Lme/zero/alpine/fork/listener/Listener;
        //   106: return         
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        //     at com.strobel.decompiler.languages.java.ast.NameVariables.generateNameForVariable(NameVariables.java:264)
        //     at com.strobel.decompiler.languages.java.ast.NameVariables.assignNamesToVariables(NameVariables.java:198)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:276)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createConstructor(AstBuilder.java:713)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:549)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.Decompiler.decompile(Decompiler.java:70)
        //     at org.ugp.mc.deobfuscator.Deobfuscator3000.decompile(Deobfuscator3000.java:536)
        //     at org.ugp.mc.deobfuscator.Deobfuscator3000.decompileAndDeobfuscate(Deobfuscator3000.java:550)
        //     at org.ugp.mc.deobfuscator.Deobfuscator3000.processMod(Deobfuscator3000.java:508)
        //     at org.ugp.mc.deobfuscator.Deobfuscator3000.lambda$18(Deobfuscator3000.java:328)
        //     at java.lang.Thread.run(Thread.java:748)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @Override
    public String getHudInfo() {
        return PacketFly.mode.getValue();
    }
    
    @Override
    public void onUpdate() {
        if (this.nullCheck()) {
            this.setEnabled(false);
        }
    }
    
    private boolean checkHitBoxes() {
        return !PacketFly.mc.world.getCollisionBoxes((Entity)PacketFly.mc.player, PacketFly.mc.player.getEntityBoundingBox().expand(-0.0625, -0.0625, -0.0625)).isEmpty();
    }
    
    private float getY() {
        if (PacketFly.antikick.getValue() && this.timer.hasPassAndReset((int)PacketFly.time.getValue())) {
            return (float)(-(PacketFly.amount.getValue() / 100.0));
        }
        if (PacketFly.mc.gameSettings.keyBindJump.isKeyDown() && PacketFly.mc.gameSettings.keyBindSneak.isKeyDown()) {
            return 0.0f;
        }
        if (PacketFly.mc.gameSettings.keyBindJump.isKeyDown()) {
            return this.getSpeed();
        }
        if (PacketFly.mc.gameSettings.keyBindSneak.isKeyDown()) {
            return -this.getSpeed();
        }
        return 0.0f;
    }
    
    @Override
    public void onDisable() {
        if (PacketFly.reset.getValue()) {
            this.lastTp = 0;
        }
        this.first = true;
        SpoofingManager.cancel = false;
    }
    
    @Override
    public void onEnable() {
        if (PacketFly.reset.getValue()) {
            this.lastTp = 0;
        }
        this.first = true;
        SpoofingManager.cancel = true;
    }
    
    private float getSpeed() {
        return (float)((this.checkHitBoxes() ? 0.036 : 0.062) * PacketFly.factor.getValue());
    }
    
    @Override
    public boolean shouldSave() {
        return false;
    }
    
    static {
        PacketFly.mode = new ModeSetting("Mode", "Up", new String[] { "Down", "Preserve", "Up", "Bounds", "Switch" });
        PacketFly.factor = new SliderSetting("Factor", 0.5, 1.0, 10.0, false);
        PacketFly.noClip = new BooleanSetting("Phase", true);
        PacketFly.update = new BooleanSetting("Update", true);
        PacketFly.reset = new BooleanSetting("Reset", false);
        PacketFly.antikick = new BooleanSetting("AntiKick", false, true);
        PacketFly.time = new SliderSetting("Timer", PacketFly.antikick, 0.0, 500.0, 2000.0, true);
        PacketFly.amount = new SliderSetting("Amount", PacketFly.antikick, 0.0, 10.0, 100.0, true);
    }
}

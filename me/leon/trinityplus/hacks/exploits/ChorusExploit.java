//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\charl\Downloads\Minecraft-Deobfuscator3000-master\1.12 stable mappings"!

//Decompiled by Procyon!

package me.leon.trinityplus.hacks.exploits;

import me.leon.trinityplus.setting.rewrite.*;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.*;
import me.leon.trinityplus.events.main.*;
import me.zero.alpine.fork.listener.*;
import me.leon.trinityplus.hacks.*;
import java.util.*;
import java.util.function.*;
import net.minecraft.network.*;
import net.minecraftforge.client.event.*;
import net.minecraft.util.math.*;
import me.leon.trinityplus.utils.rendering.*;
import net.minecraftforge.fml.common.eventhandler.*;
import net.minecraftforge.fml.common.gameevent.*;

public class ChorusExploit extends Module
{
    public static BooleanSetting player;
    public static BooleanSetting cancel;
    public static BooleanSetting rendering;
    public static ModeSetting renderMode;
    public static SliderSetting renderWidth;
    public static SliderSetting renderHeight;
    public static SliderSetting clawHeight;
    public static ColorSetting outlineColor;
    public static ColorSetting fillColor;
    Queue<CPacketPlayer> packets;
    Queue<CPacketConfirmTeleport> tpPackets;
    SPacketPlayerPosLook pak;
    @EventHandler
    public Listener<EventPacketRecieve> onPacket;
    
    public ChorusExploit() {
        super("ChorusExploit", "ChorusExploit", Category.EXPLOITS);
        this.packets = new LinkedList<CPacketPlayer>();
        this.tpPackets = new LinkedList<CPacketConfirmTeleport>();
        this.onPacket = new Listener<EventPacketRecieve>(event -> {
            if (event.getPacket() instanceof SPacketPlayerPosLook) {
                this.pak = (SPacketPlayerPosLook)event.getPacket();
                if (ChorusExploit.cancel.getValue()) {
                    event.cancel();
                }
            }
            if (event.getPacket() instanceof CPacketPlayer) {
                this.packets.add((CPacketPlayer)event.getPacket());
                if (ChorusExploit.player.getValue()) {
                    event.cancel();
                }
            }
            if (event.getPacket() instanceof CPacketConfirmTeleport) {
                this.tpPackets.add((CPacketConfirmTeleport)event.getPacket());
                event.cancel();
            }
        }, (Predicate<EventPacketRecieve>[])new Predicate[0]);
    }
    
    @Override
    public void onDisable() {
        super.onDisable();
        while (!this.packets.isEmpty()) {
            ChorusExploit.mc.getConnection().sendPacket((Packet)this.packets.poll());
        }
        while (!this.tpPackets.isEmpty()) {
            ChorusExploit.mc.getConnection().sendPacket((Packet)this.tpPackets.poll());
        }
        this.pak = null;
    }
    
    @SubscribeEvent
    public void onWorldRender(final RenderWorldLastEvent event) {
        if (this.pak == null) {
            return;
        }
        if (!ChorusExploit.rendering.getValue()) {
            return;
        }
        final BlockPos pos = new BlockPos(this.pak.getX(), this.pak.getY(), this.pak.getZ());
        final String value = ChorusExploit.renderMode.getValue();
        switch (value) {
            case "Both": {
                Tessellator.drawBBOutline(new AxisAlignedBB(pos), (float)ChorusExploit.renderWidth.getValue(), ChorusExploit.outlineColor.getValue());
                Tessellator.drawBBFill(new AxisAlignedBB(pos), ChorusExploit.fillColor.getValue());
                break;
            }
            case "Outline": {
                Tessellator.drawBBOutline(new AxisAlignedBB(pos), (float)ChorusExploit.renderWidth.getValue(), ChorusExploit.outlineColor.getValue());
                break;
            }
            case "Fill": {
                Tessellator.drawBBFill(new AxisAlignedBB(pos), ChorusExploit.fillColor.getValue());
                break;
            }
            case "Claw": {
                Tessellator.drawBBClaw(new AxisAlignedBB(pos), (float)ChorusExploit.renderWidth.getValue(), (float)ChorusExploit.clawHeight.getValue(), ChorusExploit.outlineColor.getValue());
                break;
            }
            case "Slab": {
                Tessellator.drawBBSlab(new AxisAlignedBB(pos), (float)ChorusExploit.renderHeight.getValue(), ChorusExploit.outlineColor.getValue());
                break;
            }
        }
    }
    
    @SubscribeEvent
    public void onDisconnect(final PlayerEvent.PlayerLoggedOutEvent event) {
        this.setEnabled(false);
    }
    
    static {
        ChorusExploit.player = new BooleanSetting("Player", true);
        ChorusExploit.cancel = new BooleanSetting("Cancel", true);
        ChorusExploit.rendering = new BooleanSetting("Rendering", true, true);
        ChorusExploit.renderMode = new ModeSetting("RenderMode", ChorusExploit.rendering, "Both", new String[] { "Both", "Outline", "Fill", "Claw", "Slab" });
        ChorusExploit.renderWidth = new SliderSetting("Width", ChorusExploit.rendering, 0.1, 0.5, 3.0, false);
        ChorusExploit.renderHeight = new SliderSetting("Height", ChorusExploit.rendering, -1.0, 0.0, 1.0, false);
        ChorusExploit.clawHeight = new SliderSetting("ClawHeight", ChorusExploit.rendering, 0.0, 0.3, 1.0, false);
        ChorusExploit.outlineColor = new ColorSetting("OutLine Color", ChorusExploit.rendering, 0, 255, 255, 120, false);
        ChorusExploit.fillColor = new ColorSetting("Fill Color", ChorusExploit.rendering, 0, 255, 255, 120, false);
    }
}
